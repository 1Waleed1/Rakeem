class ArabicPromptEngineer:
    """Step 1: ุชุตููู ูุชูุณูู ุงูู Prompts ุจุงูุนุฑุจูุฉ"""
    
    def __init__(self):
        self.main_template = self._create_main_template()
        self.financial_template = self._create_financial_template()
        self.legal_template = self._create_legal_template()
    
    def _create_main_template(self):
        """ุฅูุดุงุก ุงูู Prompt Template ุงูุฑุฆูุณู"""
        template = """
        ุฃูุช ูุณุงุนุฏ ูุงูู ุฎุจูุฑ ุชูุฏุนู "ุฑููููู" ูุชุชุญุฏุซ ุงูุนุฑุจูุฉ ุจุทูุงูุฉ. ูููุชู ูุณุงุนุฏุฉ ุงูุดุฑูุงุช ุงูุตุบูุฑุฉ ูุงููุชูุณุทุฉ ูู ุงูุณุนูุฏูุฉ.

        ๐ข **ูุนูููุงุช ุงูุดุฑูุฉ:**
        {company_info}
        
        ๐ **ุงูุจูุงูุงุช ุงููุงููุฉ:**
        {financial_data}
        
        ๐ **ุงููุนูููุงุช ุงูุชูุธูููุฉ ูู ZATCA:**
        {zatca_info}
        
        ๐ฌ **ุณุคุงู ุงููุณุชุฎุฏู:**
        {question}
        
        ๐ฏ **ุชุนูููุงุช ุงูุฑุฏ:**
        1. ุฃุฌุจ ุจุงููุบุฉ ุงูุนุฑุจูุฉ ุงููุตุญู ุฃู ุงูุนุงููุฉ ุงููููููุฉ
        2. ุงุณุชุฎุฏู ุงูุฃุฑูุงู ูุงูุณูุงู ุงููุงูู ุงูููุฏู ูู ุฑุฏู
        3. ุงุณุชูุฏ ุฅูู ุงููุนูููุงุช ุงูุฑุณููุฉ ูู ZATCA ุนูุฏ ุงูุฅุฌุงุจุฉ ุนู ุงูุถุฑุงุฆุจ ุฃู ุงูุฒูุงุฉ
        4. ุงุฐูุฑ ุงููุตุงุฏุฑ ุนูุฏูุง ุชุณุชุฎุฏู ูุนูููุงุช ูู ZATCA
        5. ูุฏู ูุตุงุฆุญ ุนูููุฉ ููุงุจูุฉ ููุชุทุจูู
        6. ุฅุฐุง ูู ุชูู ุงููุนูููุงุช ูุงููุฉุ ุงุทูุจ ุชูุถูุญุงู
        
        ๐ก **ุงูุฑุฏ:**
        """
        return template
    
    def _create_financial_template(self):
        """ุฅูุดุงุก Template ุฎุงุต ุจุงูุฃุณุฆูุฉ ุงููุงููุฉ"""
        template = """
        ุฃูุช ุฎุจูุฑ ูุงูู ูุชุฎุตุต ูู ุชุญููู ุงูุจูุงูุงุช ุงููุงููุฉ ููุดุฑูุงุช ุงูุณุนูุฏูุฉ.
        
        ๐ **ุงูุชุญููู ุงููุงูู ุงููุทููุจ:**
        - ูุฏู ุชุญูููุงู ูุงุถุญุงู ููุจูุงูุงุช ุงููุงููุฉ
        - ุญุฏุฏ ููุงุท ุงูููุฉ ูุงูุถุนู
        - ูุฏู ุชูุตูุงุช ุนูููุฉ ููุชุญุณูู
        
        {context}
        
        โ ุงูุณุคุงู: {question}
        
        ๐ ุงูุฑุฏ ุงูุชุญูููู:
        """
        return template
    
    def _create_legal_template(self):
        """ุฅูุดุงุก Template ุฎุงุต ุจุงูุฃุณุฆูุฉ ุงููุงููููุฉ ูุงูุชูุธูููุฉ"""
        template = """
        ุฃูุช ูุณุชุดุงุฑ ูุงูููู ูุชุฎุตุต ูู ููุงููู ุงูุฒูุงุฉ ูุงูุถุฑูุจุฉ ูู ุงูุณุนูุฏูุฉ.
        
        โ๏ธ **ุงูุชูุฌููุงุช ุงููุงููููุฉ:**
        - ูุฏู ุงููุนูููุงุช ุจุฏูุฉ ูุน ุฐูุฑ ุงููุตุงุฏุฑ
        - ุงุฐูุฑ ุงูููุงุฏ ูุงููุตูุต ุฐุงุช ุงูุตูุฉ
        - ูุจู ุฅูู ุงูุงูุชุฒุงูุงุช ูุงูููุงุนูุฏ
        
        {context}
        
        โ ุงูุณุคุงู ุงููุงูููู: {question}
        
        ๐ ุงูุฑุฏ ุงููุงูููู:
        """
        return template
    
    def format_main_prompt(self, company_info, financial_data, zatca_info, question):
        """ุชูุณูู ุงูู Prompt ุงูุฑุฆูุณู"""
        return self.main_template.format(
            company_info=company_info,
            financial_data=financial_data,
            zatca_info=zatca_info,
            question=question
        )
    
    def format_financial_prompt(self, context, question):
        """ุชูุณูู ุงูู Prompt ุงููุงูู"""
        return self.financial_template.format(
            context=context,
            question=question
        )
    
    def format_legal_prompt(self, context, question):
        """ุชูุณูู ุงูู Prompt ุงููุงูููู"""
        return self.legal_template.format(
            context=context,
            question=question
        )
    
    def detect_query_type(self, question):
        """ูุดู ููุน ุงูุณุคุงู"""
        question_lower = question.lower()
        
        financial_keywords = ['ุฑุจุญ', 'ุฎุณุงุฑุฉ', 'ุฅูุฑุงุฏุงุช', 'ูุตุฑููุงุช', 'ุชุฏูู ููุฏู', 'ููุฒุงููุฉ', 'ุชูููุฉ', 'ุฑุจุญูุฉ']
        legal_keywords = ['ุฒูุงุฉ', 'ุถุฑูุจุฉ', 'ูุงููู', 'ุงูุชุฒุงู', 'ุบุฑุงูุฉ', 'ููุนุฏ', 'ุชุณุฌูู', 'ุดุฑูุท']
        
        if any(keyword in question_lower for keyword in financial_keywords):
            return "financial"
        elif any(keyword in question_lower for keyword in legal_keywords):
            return "legal"
        else:
            return "general"

# ุงุฎุชุจุงุฑ Step 1
if __name__ == "__main__":
    print("๐งช ุงุฎุชุจุงุฑ Step 1 - Prompt Engineer")
    print("=" * 40)
    
    engineer = ArabicPromptEngineer()
    
    # ุงุฎุชุจุงุฑ ูุดู ุฃููุงุน ุงูุฃุณุฆูุฉ
    test_questions = [
        "ููู ุฃุญุณุจ ุตุงูู ุงูุฑุจุญุ",
        "ูุง ูู ููุงุนูุฏ ุฏูุน ุงูุฒูุงุฉุ",
        "ููู ูููููู ุชุญุณูู ุงูุชุฏูู ุงูููุฏูุ",
        "ูุง ูู ุดุฑูุท ุงูุฅุนูุงุก ูู ุงูุถุฑูุจุฉุ",
        "ููู ุฃุทูุฑ ุงุณุชุฑุงุชูุฌูุฉ ุงูุชุณุนูุฑุ"
    ]
    
    print("๐ ุงุฎุชุจุงุฑ ูุดู ุฃููุงุน ุงูุฃุณุฆูุฉ:")
    for i, question in enumerate(test_questions, 1):
        query_type = engineer.detect_query_type(question)
        print(f"   {i}. '{question}'")
        print(f"      โ ุงูููุน: {query_type}")
    
    # ุงุฎุชุจุงุฑ ุชูุณูู ุงูู Prompt
    print("\n๐ฏ ุงุฎุชุจุงุฑ ุชูุณูู ุงูู Prompts:")
    
    # ูููุฐุฌ ุจูุงูุงุช ุชุฌุฑูุจูุฉ
    company_info = "ุดุฑูุฉ ุงูุชุทููุฑ ุงููุญุฏูุฏุฉ"
    financial_data = "ุงูุฅูุฑุงุฏุงุช: 100,000 ุฑูุงูุ ุงููุตุฑููุงุช: 80,000 ุฑูุงู"
    zatca_info = "ูุนูููุงุช ุนู ุถุฑูุจุฉ ุงููููุฉ ุงููุถุงูุฉ"
    
    test_question = "ููู ุฃุญุณุจ ุงูุถุฑูุจุฉ ุงููุณุชุญูุฉุ"
    prompt = engineer.format_main_prompt(company_info, financial_data, zatca_info, test_question)
    print(f"   Prompt ุงูุฑุฆูุณู (ุฃูู 200 ุญุฑู):")
    print(f"   {prompt[:200]}...")
    
    print("\nโ Step 1 ุฌุงูุฒ ููุนูู!")
